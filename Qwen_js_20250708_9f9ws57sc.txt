import { useState, useEffect } from "react";

export default function App() {
  const [activeTab, setActiveTab] = useState("dashboard");
  const [darkMode, setDarkMode] = useState(false);
  const [selectedCase, setSelectedCase] = useState(null);

  // Mock data for cases
  const cases = [
    {
      id: 1,
      title: "State vs. John Doe",
      type: "Criminal Law",
      courtDate: "2025-04-10",
      region: "North West Cameroon",
      status: "Pending",
    },
    {
      id: 2,
      title: "In re: Maritime Dispute - MV Ocean Star",
      type: "Maritime Law",
      courtDate: "2025-04-18",
      region: "South West Cameroon",
      status: "Preparation",
    },
    {
      id: 3,
      title: "Child Custody - Doe v. Smith",
      type: "Family Law",
      courtDate: "2025-04-12",
      region: "North West Cameroon",
      status: "Preparation",
    },
    {
      id: 4,
      title: "International Trade Violation",
      type: "International Law",
      courtDate: "2025-04-20",
      region: "International Tribunal",
      status: "Pending",
    },
  ];

  // Mock legal library resources
  const legalLibrary = {
    criminalLaw: [
      { title: "Cameroon Penal Code", year: 2020, link: "#" },
      { title: "Criminal Procedure Code", year: 2021, link: "#" },
    ],
    maritimeLaw: [
      { title: "UNCLOS Implementation in Cameroon", year: 2019, link: "#" },
      { title: "Maritime Jurisdiction Act", year: 2022, link: "#" },
    ],
    familyLaw: [
      { title: "Civil Code on Marriage and Divorce", year: 2018, link: "#" },
      { title: "Children's Rights Act", year: 2020, link: "#" },
    ],
    internationalLaw: [
      { title: "Vienna Convention on Diplomatic Relations", year: 2017, link: "#" },
      { title: "ICJ Case Law Digest", year: 2021, link: "#" },
    ],
  };

  // Toggle dark mode
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, [darkMode]);

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow-md p-4 flex justify-between items-center">
        <h1 className="text-2xl font-bold text-blue-600 dark:text-blue-400">LegalPro</h1>
        <div className="flex items-center space-x-4">
          <button
            onClick={() => setDarkMode(!darkMode)}
            className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition"
          >
            {darkMode ? (
              <SunIcon />
            ) : (
              <MoonIcon />
            )}
          </button>
        </div>
      </header>

      {/* Main Layout */}
      <div className="flex flex-col md:flex-row">
        {/* Sidebar */}
        <nav className="w-full md:w-64 bg-white dark:bg-gray-800 shadow-md p-4 space-y-2">
          <NavItem label="Dashboard" icon={<HomeIcon />} active={activeTab === "dashboard"} onClick={() => setActiveTab("dashboard")} />
          <NavItem label="Court Calendar" icon={<CalendarIcon />} active={activeTab === "calendar"} onClick={() => setActiveTab("calendar")} />
          <NavItem label="Cases" icon={<BriefcaseIcon />} active={activeTab === "cases"} onClick={() => setActiveTab("cases")} />
          <NavItem label="Legal Library" icon={<BookIcon />} active={activeTab === "library"} onClick={() => setActiveTab("library")} />
          <NavItem label="Settings" icon={<SettingsIcon />} active={activeTab === "settings"} onClick={() => setActiveTab("settings")} />
        </nav>

        {/* Content Area */}
        <main className="flex-1 p-6 bg-gray-50 dark:bg-gray-900">
          {activeTab === "dashboard" && <DashboardView />}
          {activeTab === "calendar" && <CalendarView />}
          {activeTab === "cases" && <CasesView cases={cases} selectedCase={selectedCase} onSelectCase={setSelectedCase} />}
          {activeTab === "library" && <LibraryView legalLibrary={legalLibrary} />}
          {activeTab === "settings" && <SettingsView />}
        </main>
      </div>
    </div>
  );
}

// Navigation Item Component
function NavItem({ label, icon, active, onClick }) {
  return (
    <button
      onClick={onClick}
      className={`flex items-center w-full p-2 rounded-lg transition ${
        active
          ? "bg-blue-600 text-white"
          : "hover:bg-gray-200 dark:hover:bg-gray-700"
      }`}
    >
      <span className="mr-3">{icon}</span>
      <span>{label}</span>
    </button>
  );
}

// Dashboard View
function DashboardView() {
  return (
    <section>
      <h2 className="text-xl font-semibold mb-4">Welcome to LegalPro</h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <StatCard title="Total Cases" value="12" color="blue" />
        <StatCard title="Upcoming Court Dates" value="4" color="green" />
        <StatCard title="Books Accessed" value="28" color="purple" />
      </div>
      <div className="mt-8 bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <h3 className="font-semibold mb-4">Recent Updates</h3>
        <ul className="space-y-2">
          <li>• New case added: Maritime dispute in South West Region</li>
          <li>• Updated legal resource: International Criminal Law Digest</li>
          <li>• Upcoming trial scheduled for April 10th, 2025</li>
        </ul>
      </div>
    </section>
  );
}

// Stat Card Component
function StatCard({ title, value, color }) {
  const colors = {
    blue: "bg-blue-500",
    green: "bg-green-500",
    purple: "bg-purple-500",
  };
  return (
    <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
      <div className="flex items-center">
        <div className={`w-2 h-10 ${colors[color]} rounded mr-3`}></div>
        <div>
          <h3 className="text-sm text-gray-500 dark:text-gray-400">{title}</h3>
          <p className="text-2xl font-bold">{value}</p>
        </div>
      </div>
    </div>
  );
}

// Calendar View
function CalendarView() {
  return (
    <section>
      <h2 className="text-xl font-semibold mb-4">Court Calendar</h2>
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <div className="mb-4 grid grid-cols-7 gap-2 text-center text-sm font-medium">
          {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((day) => (
            <div key={day}>{day}</div>
          ))}
        </div>
        <div className="grid grid-cols-7 gap-2 text-center text-sm">
          {[...Array(35)].map((_, i) => {
            const date = i - 5;
            const hasEvent = date === 10 || date === 18 || date === 12;
            return (
              <div key={i} className="relative min-h-20 border border-gray-200 dark:border-gray-700 p-1">
                {date > 0 && date <= 31 && (
                  <>
                    <div className="absolute top-1 right-1 text-xs">{date}</div>
                    {hasEvent && (
                      <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-red-500 rounded-full"></div>
                    )}
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </section>
  );
}

// Cases View
function CasesView({ cases, selectedCase, onSelectCase }) {
  return (
    <section>
      <h2 className="text-xl font-semibold mb-4">My Cases</h2>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1 bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
          <h3 className="font-semibold mb-3">Case List</h3>
          <ul className="space-y-2 max-h-96 overflow-y-auto">
            {cases.map((c) => (
              <li
                key={c.id}
                onClick={() => onSelectCase(c.id === selectedCase ? null : c.id)}
                className={`p-3 rounded cursor-pointer transition ${
                  selectedCase === c.id
                    ? "bg-blue-100 dark:bg-blue-900"
                    : "hover:bg-gray-100 dark:hover:bg-gray-700"
                }`}
              >
                <p className="font-medium">{c.title}</p>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {c.type} • {c.region}
                </p>
              </li>
            ))}
          </ul>
        </div>
        <div className="lg:col-span-2">
          {selectedCase ? (
            <CaseDetailView case={cases.find((c) => c.id === selectedCase)} />
          ) : (
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow h-full flex items-center justify-center">
              <p className="text-gray-500 dark:text-gray-400">
                Select a case to view details
              </p>
            </div>
          )}
        </div>
      </div>
    </section>
  );
}

// Case Detail View
function CaseDetailView({ case: c }) {
  return (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
      <h3 className="text-xl font-bold mb-4">{c.title}</h3>
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p className="text-sm text-gray-500 dark:text-gray-400">Type</p>
          <p className="font-medium">{c.type}</p>
        </div>
        <div>
          <p className="text-sm text-gray-500 dark:text-gray-400">Region</p>
          <p className="font-medium">{c.region}</p>
        </div>
        <div>
          <p className="text-sm text-gray-500 dark:text-gray-400">Court Date</p>
          <p className="font-medium">{new Date(c.courtDate).toLocaleDateString()}</p>
        </div>
        <div>
          <p className="text-sm text-gray-500 dark:text-gray-400">Status</p>
          <span
            className={`inline-block px-2 py-1 rounded-full text-xs font-semibold ${
              c.status === "Pending"
                ? "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
                : "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
            }`}
          >
            {c.status}
          </span>
        </div>
      </div>
      <div>
        <h4 className="font-medium mb-2">Description</h4>
        <p className="text-gray-600 dark:text-gray-300">
          This is a detailed description of the case including relevant legal points, evidence summary, and strategy notes.
        </p>
      </div>
    </div>
  );
}

// Library View
function LibraryView({ legalLibrary }) {
  return (
    <section>
      <h2 className="text-xl font-semibold mb-4">Legal Library</h2>
      <div className="space-y-6">
        <LibrarySection title="Criminal Law" books={legalLibrary.criminalLaw} />
        <LibrarySection title="Maritime Law" books={legalLibrary.maritimeLaw} />
        <LibrarySection title="Family Law" books={legalLibrary.familyLaw} />
        <LibrarySection title="International Law" books={legalLibrary.internationalLaw} />
      </div>
    </section>
  );
}

// Library Section Component
function LibrarySection({ title, books }) {
  return (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
      <h3 className="text-lg font-semibold mb-3">{title}</h3>
      <ul className="space-y-2">
        {books.map((book, index) => (
          <li key={index} className="border-b pb-2 border-gray-200 dark:border-gray-700 last:border-0">
            <a href={book.link} className="hover:underline font-medium">{book.title}</a>
            <p className="text-sm text-gray-500 dark:text-gray-400">Published: {book.year}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}

// Settings View
function SettingsView() {
  return (
    <section>
      <h2 className="text-xl font-semibold mb-4">Settings</h2>
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <h3 className="font-medium mb-4">Account Settings</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Email</label>
            <input
              type="email"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700"
              defaultValue="lawyer@example.com"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Phone</label>
            <input
              type="tel"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700"
              defaultValue="+237 670 000 000"
            />
          </div>
        </div>
        <div className="mt-6 flex space-x-3">
          <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
            Save Changes
          </button>
          <button className="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition">
            Cancel
          </button>
        </div>
      </div>
    </section>
  );
}

// Icons
function HomeIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
      <polyline points="9 22 9 12 15 12 15 22"></polyline>
    </svg>
  );
}

function CalendarIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
      <line x1="16" y1="2" x2="16" y2="6"></line>
      <line x1="8" y1="2" x2="8" y2="6"></line>
      <line x1="3" y1="10" x2="21" y2="10"></line>
    </svg>
  );
}

function BriefcaseIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
      <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
    </svg>
  );
}

function BookIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
      <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
    </svg>
  );
}

function SettingsIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <circle cx="12" cy="12" r="3"></circle>
      <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
    </svg>
  );
}

function MoonIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  );
}

function SunIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
  );
}

import React, { useState, useEffect } from 'react';

export default function App() {
  // State management
  const [user, setUser] = useState(null);
  const [cases, setCases] = useState([
    {
      id: 1,
      title: "State vs John Doe",
      type: "Criminal Law",
      region: "North-West Cameroon",
      status: "Active",
      files: [
        { name: "Indictment.pdf", uploadedBy: "Managing Partner", date: "2024-03-15" },
        { name: "Evidence.docx", uploadedBy: "Managing Partner", date: "2024-03-16" }
      ],
      comments: [
        { user: "Managing Partner", text: "Initial review completed.", date: "2024-03-17" }
      ],
      viewableBy: ["Managing Partner", "Associate Partner", "Associate"]
    },
    {
      id: 2,
      title: "Maritime Dispute - Vessel #123",
      type: "Maritime Law",
      region: "South-West Cameroon",
      status: "Pending",
      files: [
        { name: "Contract.pdf", uploadedBy: "Managing Partner", date: "2024-03-18" }
      ],
      comments: [],
      viewableBy: ["Managing Partner", "Associate Partner"]
    }
  ]);

  const [trainings, setTrainings] = useState([
    {
      id: 1,
      title: "Criminal Law Case Study",
      description: "Analyze the case of State v. John Smith and provide legal opinion.",
      assignedBy: "Managing Partner",
      deadline: "2024-04-01",
      submissions: []
    },
    {
      id: 2,
      title: "Maritime Jurisdiction Overview",
      description: "Prepare a summary of maritime jurisdiction boundaries in Cameroon.",
      assignedBy: "Managing Partner",
      deadline: "2024-04-05",
      submissions: []
    }
  ]);

  const [currentView, setCurrentView] = useState("dashboard");
  const [newCase, setNewCase] = useState({
    title: "",
    type: "",
    region: "",
    status: "Active"
  });
  const [selectedCase, setSelectedCase] = useState(null);
  const [newComment, setNewComment] = useState("");
  const [newTraining, setNewTraining] = useState({
    title: "",
    description: "",
    visibility: "private"
  });

  // Mock login function
  const handleLogin = (level) => {
    setUser({ clearance: level });
    setCurrentView("dashboard");
  };

  // Add new case
  const addCase = () => {
    if (!newCase.title || !newCase.type || !newCase.region) return;
    
    const caseToAdd = {
      ...newCase,
      id: Date.now(),
      status: "Active",
      files: [],
      comments: [],
      viewableBy: ["Managing Partner", ...(newCase.associateAccess ? ["Associate Partner"] : []), ...(newCase.traineeAccess ? ["Associate"] : [])]
    };
    
    setCases([...cases, caseToAdd]);
    setNewCase({ title: "", type: "", region: "", status: "Active" });
    setCurrentView("dashboard");
  };

  // Update case status
  const updateCaseStatus = (id, newStatus) => {
    setCases(cases.map(c => 
      c.id === id ? { ...c, status: newStatus } : c
    ));
  };

  // Add file to case
  const addFileToCase = (id, file) => {
    const updatedCases = cases.map(c => {
      if (c.id === id) {
        return {
          ...c,
          files: [...c.files, file]
        };
      }
      return c;
    });
    setCases(updatedCases);
  };

  // Add comment to case
  const addCommentToCase = (id, comment) => {
    const updatedCases = cases.map(c => {
      if (c.id === id) {
        return {
          ...c,
          comments: [...c.comments, {
            user: user.clearance,
            text: comment,
            date: new Date().toISOString().split('T')[0]
          }]
        };
      }
      return c;
    });
    setCases(updatedCases);
    setNewComment("");
  };

  // Add training assignment
  const addTraining = () => {
    if (!newTraining.title || !newTraining.description) return;
    
    const trainingToAdd = {
      ...newTraining,
      id: Date.now(),
      assignedBy: user.clearance,
      deadline: "2024-04-15",
      submissions: [],
      visibility: newTraining.visibility
    };
    
    setTrainings([...trainings, trainingToAdd]);
    setNewTraining({ title: "", description: "", visibility: "private" });
    setCurrentView("training");
  };

  // Submit training assignment
  const submitTraining = (id, file) => {
    const updatedTrainings = trainings.map(t => {
      if (t.id === id) {
        return {
          ...t,
          submissions: [...t.submissions, {
            user: user.clearance,
            file: file,
            submittedAt: new Date().toISOString().split('T')[0]
          }]
        };
      }
      return t;
    });
    setTrainings(updatedTrainings);
  };

  // Render functions
  const renderLoginForm = () => (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 to-purple-900 flex items-center justify-center p-4">
      <div className="bg-white rounded-xl shadow-2xl p-8 max-w-md w-full transform transition-all hover:scale-105">
        <h2 className="text-3xl font-bold text-center mb-6 text-gray-800">Law Firm Portal</h2>
        <p className="text-center text-gray-600 mb-6">Select your clearance level to log in</p>
        
        <div className="space-y-4">
          <button
            onClick={() => handleLogin("Managing Partner")}
            className="w-full py-3 px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-300"
          >
            Managing Partner
          </button>
          
          <button
            onClick={() => handleLogin("Associate Partner")}
            className="w-full py-3 px-4 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg transition-colors duration-300"
          >
            Associate Partner
          </button>
          
          <button
            onClick={() => handleLogin("Associate")}
            className="w-full py-3 px-4 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg transition-colors duration-300"
          >
            Associate
          </button>
        </div>
      </div>
    </div>
  );

  const renderDashboard = () => {
    const accessibleCases = cases.filter(c => c.viewableBy.includes(user.clearance));
    
    return (
      <div className="min-h-screen bg-gray-100">
        {/* Header */}
        <header className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
            <h1 className="text-2xl font-bold text-blue-900">Legal Case Management</h1>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600">Logged in as: {user.clearance}</span>
              <button 
                onClick={() => setUser(null)}
                className="text-red-600 hover:text-red-800 text-sm font-medium"
              >
                Logout
              </button>
            </div>
          </div>
        </header>

        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-700">Total Cases</h3>
              <p className="text-3xl font-bold text-blue-600 mt-2">{accessibleCases.length}</p>
            </div>
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-700">Active Cases</h3>
              <p className="text-3xl font-bold text-green-600 mt-2">{accessibleCases.filter(c => c.status === "Active").length}</p>
            </div>
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-700">Pending Cases</h3>
              <p className="text-3xl font-bold text-yellow-600 mt-2">{accessibleCases.filter(c => c.status === "Pending").length}</p>
            </div>
          </div>

          {/* Actions */}
          <div className="mb-8 flex flex-wrap gap-4">
            {user.clearance === "Managing Partner" && (
              <>
                <button
                  onClick={() => setCurrentView("new-case")}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  New Case
                </button>
                <button
                  onClick={() => setCurrentView("training")}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                >
                  Training Platform
                </button>
              </>
            )}
          </div>

          {/* Cases List */}
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
              <h2 className="text-xl font-semibold text-gray-800">Your Cases</h2>
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search cases..."
                  className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <svg className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
            </div>
            
            <div className="divide-y divide-gray-200">
              {accessibleCases.map((caseItem) => (
                <div 
                  key={caseItem.id}
                  className="p-6 hover:bg-gray-50 cursor-pointer transition-colors"
                  onClick={() => {
                    setSelectedCase(caseItem);
                    setCurrentView("case-details");
                  }}
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{caseItem.title}</h3>
                      <div className="mt-1 flex items-center space-x-4 text-sm text-gray-500">
                        <span>{caseItem.type}</span>
                        <span>•</span>
                        <span>{caseItem.region}</span>
                        <span>•</span>
                        <span>Status: <span className={`font-medium ${
                          caseItem.status === "Active" ? "text-green-600" : "text-yellow-600"
                        }`}>{caseItem.status}</span></span>
                      </div>
                    </div>
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {caseItem.files.length} Files
                    </span>
                  </div>
                  
                  <div className="mt-4 flex items-center justify-between">
                    <div className="text-sm text-gray-500">
                      {caseItem.comments.length} Comments
                    </div>
                    
                    <div className="flex space-x-2">
                      {user.clearance === "Managing Partner" && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            updateCaseStatus(caseItem.id, caseItem.status === "Active" ? "Pending" : "Active");
                          }}
                          className="text-sm px-3 py-1 rounded bg-gray-100 hover:bg-gray-200 text-gray-700"
                        >
                          {caseItem.status === "Active" ? "Mark Pending" : "Reopen"}
                        </button>
                      )}
                      
                      {user.clearance !== "Associate" && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            setSelectedCase(caseItem);
                            setCurrentView("add-comment");
                          }}
                          className="text-sm px-3 py-1 rounded bg-blue-100 hover:bg-blue-200 text-blue-800"
                        >
                          Comment
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
              
              {accessibleCases.length === 0 && (
                <div className="p-8 text-center text-gray-500">
                  No cases found. Please check your filters or request access.
                </div>
              )}
            </div>
          </div>
        </main>
      </div>
    );
  };

  const renderNewCaseForm = () => (
    <div className="min-h-screen bg-gray-100">
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-blue-900">Create New Case</h1>
          <button 
            onClick={() => setCurrentView("dashboard")}
            className="text-blue-600 hover:text-blue-800"
          >
            Back to Dashboard
          </button>
        </div>
      </header>

      <main className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-6">Case Details</h2>
          
          <form onSubmit={(e) => { e.preventDefault(); addCase(); }}>
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Case Title</label>
                <input
                  type="text"
                  value={newCase.title}
                  onChange={(e) => setNewCase({...newCase, title: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Case Type</label>
                <select
                  value={newCase.type}
                  onChange={(e) => setNewCase({...newCase, type: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  required
                >
                  <option value="">Select type</option>
                  <option value="Criminal Law">Criminal Law</option>
                  <option value="Maritime Law">Maritime Law</option>
                  <option value="Family Law">Family Law</option>
                  <option value="International Law">International Law</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Region</label>
                <select
                  value={newCase.region}
                  onChange={(e) => setNewCase({...newCase, region: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  required
                >
                  <option value="">Select region</option>
                  <option value="North-West Cameroon">North-West Cameroon</option>
                  <option value="South-West Cameroon">South-West Cameroon</option>
                </select>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Visibility Level</label>
                  <div className="space-y-2">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        checked={newCase.associateAccess}
                        onChange={(e) => setNewCase({...newCase, associateAccess: e.target.checked})}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <span className="ml-2 text-sm text-gray-700">Associate Access</span>
                    </label>
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        checked={newCase.traineeAccess}
                        onChange={(e) => setNewCase({...newCase, traineeAccess: e.target.checked})}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      />
                      <span className="ml-2 text-sm text-gray-700">Trainee Access</span>
                    </label>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                  <select
                    value={newCase.status}
                    onChange={(e) => setNewCase({...newCase, status: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="Active">Active</option>
                    <option value="Pending">Pending</option>
                  </select>
                </div>
              </div>
              
              <div>
                <button
                  type="submit"
                  className="w-full py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  Create Case
                </button>
              </div>
            </div>
          </form>
        </div>
      </main>
    </div>
  );

  const renderCaseDetails = () => {
    if (!selectedCase) return null;
    
    return (
      <div className="min-h-screen bg-gray-100">
        <header className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
            <h1 className="text-2xl font-bold text-blue-900">{selectedCase.title}</h1>
            <button 
              onClick={() => setCurrentView("dashboard")}
              className="text-blue-600 hover:text-blue-800"
            >
              Back to Dashboard
            </button>
          </div>
        </header>

        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-semibold text-gray-800">{selectedCase.title}</h2>
                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  selectedCase.status === "Active" 
                    ? "bg-green-100 text-green-800" 
                    : "bg-yellow-100 text-yellow-800"
                }`}>
                  {selectedCase.status}
                </span>
              </div>
              
              <div className="mt-2 flex items-center space-x-4 text-sm text-gray-500">
                <span>{selectedCase.type}</span>
                <span>•</span>
                <span>{selectedCase.region}</span>
              </div>
            </div>
            
            {/* Files Section */}
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-800 mb-4">Files</h3>
              
              <div className="space-y-3">
                {selectedCase.files.map((file, index) => (
                  <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-md">
                    <div className="flex items-center">
                      <svg className="h-5 w-5 text-blue-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      <span className="text-sm font-medium text-gray-900">{file.name}</span>
                    </div>
                    <div className="text-sm text-gray-500">
                      Uploaded by {file.uploadedBy} on {file.date}
                    </div>
                  </div>
                ))}
                
                {selectedCase.files.length === 0 && (
                  <p className="text-sm text-gray-500 italic">No files uploaded yet.</p>
                )}
              </div>
              
              {(user.clearance === "Managing Partner" || user.clearance === "Associate Partner") && (
                <div className="mt-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Upload File</label>
                  <div className="flex">
                    <input
                      type="file"
                      accept=".pdf,.docx"
                      className="block w-full text-sm text-gray-500
                        file:mr-4 file:py-2 file:px-4
                        file:rounded-l-md file:border-0
                        file:text-sm file:font-semibold
                        file:bg-blue-50 file:text-blue-700
                        hover:file:bg-blue-100"
                      onChange={(e) => {
                        if (e.target.files[0]) {
                          const file = {
                            name: e.target.files[0].name,
                            uploadedBy: user.clearance,
                            date: new Date().toISOString().split('T')[0]
                          };
                          addFileToCase(selectedCase.id, file);
                          e.target.value = null; // Reset input
                        }
                      }}
                    />
                  </div>
                </div>
              )}
            </div>
            
            {/* Comments Section */}
            <div className="px-6 py-4">
              <h3 className="text-lg font-medium text-gray-800 mb-4">Comments</h3>
              
              <div className="space-y-4 mb-6">
                {selectedCase.comments.map((comment, index) => (
                  <div key={index} className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-medium text-gray-900">{comment.user}</span>
                      <span className="text-sm text-gray-500">{comment.date}</span>
                    </div>
                    <p className="text-gray-700">{comment.text}</p>
                  </div>
                ))}
                
                {selectedCase.comments.length === 0 && (
                  <p className="text-sm text-gray-500 italic">No comments yet.</p>
                )}
              </div>
              
              {user.clearance !== "Associate" && (
                <div>
                  <textarea
                    value={newComment}
                    onChange={(e) => setNewComment(e.target.value)}
                    placeholder="Add a comment..."
                    rows="3"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  ></textarea>
                  
                  <button
                    onClick={() => addCommentToCase(selectedCase.id, newComment)}
                    disabled={!newComment.trim()}
                    className={`mt-2 px-4 py-2 rounded-md ${
                      newComment.trim()
                        ? "bg-blue-600 text-white hover:bg-blue-700"
                        : "bg-gray-300 text-gray-500 cursor-not-allowed"
                    }`}
                  >
                    Post Comment
                  </button>
                </div>
              )}
            </div>
            
            {/* Status Controls */}
            <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
              {user.clearance === "Managing Partner" && (
                <div className="flex justify-end">
                  <button
                    onClick={() => updateCaseStatus(selectedCase.id, selectedCase.status === "Active" ? "Pending" : "Active")}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                  >
                    {selectedCase.status === "Active" ? "Mark as Pending" : "Reopen Case"}
                  </button>
                </div>
              )}
            </div>
          </div>
        </main>
      </div>
    );
  };

  const renderTrainingPlatform = () => (
    <div className="min-h-screen bg-gray-100">
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-blue-900">Training Platform</h1>
          <button 
            onClick={() => setCurrentView("dashboard")}
            className="text-blue-600 hover:text-blue-800"
          >
            Back to Dashboard
          </button>
        </div>
      </header>

      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Assignments</h2>
          
          {user.clearance === "Managing Partner" && (
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <h3 className="text-lg font-medium text-gray-800 mb-4">Create New Assignment</h3>
              
              <form onSubmit={(e) => { e.preventDefault(); addTraining(); }}>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                    <input
                      type="text"
                      value={newTraining.title}
                      onChange={(e) => setNewTraining({...newTraining, title: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea
                      value={newTraining.description}
                      onChange={(e) => setNewTraining({...newTraining, description: e.target.value})}
                      rows="4"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      required
                    ></textarea>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Visibility</label>
                    <select
                      value={newTraining.visibility}
                      onChange={(e) => setNewTraining({...newTraining, visibility: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="private">Private (Only tutor can see)</option>
                      <option value="public">Public (All trainees can see)</option>
                    </select>
                  </div>
                  
                  <button
                    type="submit"
                    className="w-full py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Create Assignment
                  </button>
                </div>
              </form>
            </div>
          )}
          
          <div className="space-y-6">
            {trainings.map((training) => (
              <div key={training.id} className="bg-white rounded-lg shadow p-6">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">{training.title}</h3>
                    <p className="mt-2 text-gray-600">{training.description}</p>
                    <div className="mt-2 text-sm text-gray-500">
                      Assigned by {training.assignedBy} | Deadline: {training.deadline}
                    </div>
                  </div>
                  
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    training.visibility === "private" 
                      ? "bg-gray-100 text-gray-800" 
                      : "bg-blue-100 text-blue-800"
                  }`}>
                    {training.visibility === "private" ? "Private" : "Public"}
                  </span>
                </div>
                
                {user.clearance === "Associate" && (
                  <div className="mt-6">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Submit Assignment</h4>
                    <input
                      type="file"
                      accept=".pdf,.docx"
                      className="block w-full text-sm text-gray-500
                        file:mr-4 file:py-2 file:px-4
                        file:rounded-l-md file:border-0
                        file:text-sm file:font-semibold
                        file:bg-blue-50 file:text-blue-700
                        hover:file:bg-blue-100"
                      onChange={(e) => {
                        if (e.target.files[0]) {
                          const file = {
                            name: e.target.files[0].name,
                            submittedAt: new Date().toISOString().split('T')[0]
                          };
                          
                          submitTraining(training.id, file);
                          e.target.value = null; // Reset input
                        }
                      }}
                    />
                    
                    {training.submissions.some(sub => sub.user === user.clearance) && (
                      <p className="mt-2 text-sm text-green-600">You have already submitted this assignment.</p>
                    )}
                  </div>
                )}
                
                {user.clearance === "Managing Partner" && training.submissions.length > 0 && (
                  <div className="mt-6">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Submissions ({training.submissions.length})</h4>
                    <ul className="space-y-2">
                      {training.submissions.map((submission, idx) => (
                        <li key={idx} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                          <span className="text-sm text-gray-700">{submission.file.name}</span>
                          <span className="text-xs text-gray-500">{submission.submittedAt}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            ))}
            
            {trainings.length === 0 && (
              <div className="bg-white rounded-lg shadow p-8 text-center text-gray-500">
                No assignments available yet.
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );

  if (!user) {
    return renderLoginForm();
  }

  switch(currentView) {
    case "dashboard":
      return renderDashboard();
    case "new-case":
      return renderNewCaseForm();
    case "case-details":
      return renderCaseDetails();
    case "training":
      return renderTrainingPlatform();
    default:
      return renderDashboard();
  }
}
